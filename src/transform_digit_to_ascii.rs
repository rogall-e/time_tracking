pub fn transform_digit_to_ascii(digit: i32) -> String{
    match digit {
        0 =>   "┌────────┐\n\
                │        │\n\
                │ ┌────┐ │\n\
                │ │    │ │\n\
                │ │    │ │\n\
                │ │    │ │\n\
                │ │    │ │\n\
                │ │    │ │\n\
                │ └────┘ │\n\
                │        │\n\
                └────────┘".to_string(),
        1 =>   "   ┌──┐   \n\
                   │  │   \n\
                   │  │   \n\
                   │  │   \n\
                   │  │   \n\
                   │  │   \n\
                   │  │   \n\
                   │  │   \n\
                   │  │   \n\
                   │  │   \n\
                   └──┘    ".to_string(),
        2 =>   "┌────────┐\n\
                │        │\n\
                └────┐   │\n\
                     │   │\n\
                ┌────┘   │\n\
                │        │\n\
                │   ┌────┘\n\
                │   │     \n\
                │   └────┐\n\
                │        │\n\
                └────────┘".to_string(),
        3 =>   "┌────────┐\n\
                │        │\n\
                └────┐   │\n\
                     │   │\n\
                ┌────┘   │\n\
                │        │\n\
                └────┐   │\n\
                     │   │\n\
                ┌────┘   │\n\
                │        │\n\
                └────────┘".to_string(),
        4 =>   "┌──┐     \n\
                │  │     \n\
                │  │     \n\
                │  │     \n\
                │  │  ┌──┐\n\
                │  │  │  │\n\
                │  └──┘  │\n\
                │        │\n\
                └─────┐  │\n\
                      │  │\n\
                      └──┘".to_string(),
        5 =>   "┌────────┐\n\
                │        │\n\
                │   ┌────┘\n\
                │   │    \n\
                │   └────┐\n\
                │        │\n\
                └────┐   │\n\
                     │   │\n\
                ┌────┘   │\n\
                │        │\n\
                └────────┘".to_string(),
        6 =>   "┌────────┐\n\
                │        │\n\
                │   ┌────┘\n\
                │   │     \n\
                │   └────┐\n\
                │        │\n\
                │ ┌────┐ │\n\
                │ │    │ │\n\
                │ └────┘ │\n\
                │        │\n\
                └────────┘".to_string(),
        7 =>   "┌────────┐\n\
                │        │\n\
                └────┐   │\n\
                     │   │\n\
                     │   │\n\
                     │   │\n\
                     │   │\n\
                     │   │\n\
                     │   │\n\
                     │   │\n\
                     └───┘".to_string(),
        8 =>   "┌────────┐\n\
                │        │\n\
                │        │\n\
                │ ┌────┐ │\n\
                │ │    │ │\n\
                │ └────┘ │\n\
                │        │\n\
                │ ┌────┐ │\n\
                │ │    │ │\n\
                │ └────┘ │\n\
                │        │\n\
                └────────┘".to_string(),
        9 =>   "┌────────┐\n\
                │        │\n\
                │ ┌────┐ │\n\
                │ │    │ │\n\
                │ │    │ │\n\
                │ └────┘ │\n\
                │        │\n\
                └────┐   │\n\
                     │   │\n\
                ┌────┘   │\n\
                │        │\n\
                └────────┘".to_string(),
        _ =>   "".to_string(),
        
    }
}

pub fn draw_colon() -> String {
    "          \n\
               \n\
               \n\
       ┌────┐  \n\
       │    │  \n\
       └────┘  \n\
               \n\
       ┌────┐  \n\
       │    │  \n\
       └────┘  \n\
               \n\
               ".to_string(),
}

